Features

- read in GPX, KML, CSV files
- should have layers:
  - the actual data should be kept in an HDF5 file
  - importation should be solely based on timestamp, x, y, and owner
  - an extra layer should be a very fast elevation service
  - an info layer of json/something else over the top will load on-disk access to the HDF
  - this info layer should be selectable by a range of selectors
  - exportable (or kept in sync) with a set of KML/GPX files that are tied to some info layer selection
- separately threaded process which checks for updated KML/GPX files in a folder hierarchy (e.g. USB-attached garmin gps, etc.)
- nice UI for selecting calendar dates or ranges of dates, and times
- persistent selections
- fast, pretty plotting using probably pyqtgraph
    - obviously a map:
        - cached shapefiles from OSM for background images
        - possibly google maps??? Not sure about this one
    - elevation graph
        - tie this to the map
- use guidata for as much as possible
- auto-detection of activity type as cycling/walking/driving, also make this machine learnable, so in essence come with a set of descriptive parameters and then have the computer correlate them to past labelled cycle/walks/etc and have it choose an automatic one and if it is not certain, have it ask you and display the reason why it thinks it is a walk/cycle/drive on the screen.
- every operation should be separated out from the GUI, although everything should also be accessible from the gui. Try as much as possible to save the full information about the set of actions to be performed by a menu to be saved, or at least possible to be saved, as a JSON file. Research how to implement proper application redo/undos.

Design:

Location data is stored in an HDF5 file with a single numpy array with columns: 
    
    0: timestamp [dtype ?]
    1: longitude [dtype float32? or float64?]
    2: latitude  [dtype float32? or float64?]
    3: elevation [dtype float32]
    4: metadata key [dtype int32]
    
All are numeric and all can be NaN (the timestamp because of KML LineStrings, the elevation because it often isn't present, and the metadata key for data without metadata. The latitude and longitude can be NaN only through datapoints that have been deleted (those will stay in the HDF5 file).

Upon every import some metadata will be collected, like the filename, path, timestamp, and an optional form. This will go into import-[timestamp].yaml, and an entry placed in metadata-keys.yaml linking the import timestamp to a metadata key that is attached to the data. Subsequent edits to the actual data (timestamp, latitude, longitude, or elevation) will result in an additional tag being placed in the entry in the metadata-keys.yaml file.

Every action in the program will be converted into a 'do' function (and a corresponding 'undo' function) and the functions will be saved to an actions.yaml file before being executed.

Drawing or selecting items from maps or figures in the UI will be written with touchscreens in mind. Definitely. Everything will have a keyboard shortcut, or shortcuts that are sensible and easy to use, and clipboards will be used as much as possible, along with ways to 'remember' past settings or choices and persist them. I hate GUI programs that don't do this, or that require a lot of configuration every time you use them.